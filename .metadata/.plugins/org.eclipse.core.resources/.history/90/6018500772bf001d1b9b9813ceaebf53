package com.fastcampus.ch2;

import javax.validation.Valid;

import org.springframework.beans.propertyeditors.StringArrayPropertyEditor;
import org.springframework.core.convert.ConversionService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class RegisterController {
	
	@InitBinder
	public void toDate(WebDataBinder binder) {
		ConversionService conversionService = binder.getConversionService();
//		System.out.println("conversionService = " + conversionService);
		
//		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
//		binder.registerCustomEditor(Date.class, new CustomDateEditor(df, false));
		binder.registerCustomEditor(String[].class, new StringArrayPropertyEditor("#"));
//		binder.setValidator(new UserValidator()); // UserValidator를 WebDataBinder의 로컬 Validator로 등록
		binder.addValidators(new UserValidator());
	}
	
	@RequestMapping(value="/register/add", method= {RequestMethod.GET , RequestMethod.POST})
//	@RequestMapping("/register/add")
//	@GetMapping("/register/add")
	public String register() {
		return "registerForm"; // WEB-INF/views/registerForm.jsp
	}
	
//	@RequestMapping("/register/save", method=RequestMethod.POST)
	@PostMapping("/register/save") // spring 4.3부터
	public String save(@Valid User user,BindingResult result, Model m) throws Exception {
		System.out.println("result=" +result);
		System.out.println("user=" +user);
		
		// 수동 검 증 - Validator를 직접 생성하고, validator()를 직접 호출
		UserValidator userValidator = new UserValidator();
		userValidator.validate(user, result); // BindingResult 는 Errors의 자손
		
		// User 객체를 검증한 결과 에러가 있으면, registerForm을 이용해서 에러를 보여줘야함
		if (result.hasErrors()) { 
			return "registerForm";
		}
		
		// 1. 유효성 검사
//		if (!isValid(user)) {
//			String msg = URLEncoder.encode("id를 잘못 입력하셨습니다.", "utf-8");
//			
//			m.addAttribute("msg", msg);
//			return "forward:/register/add";
////			return "redirect:/register/add?msg="+msg; // URL 재작성(rewriting)
//		}
		
		return "registerInfo";
	}

	private boolean isValid(User user) {
		return true;
	}

}
